{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { isPluralElement, isLiteralElement, isSelectElement } from './types';\nimport { pegParse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\r\n * Whether to convert `#` in plural rule options\r\n * to `{var, number}`\r\n * @param el AST Element\r\n * @param pluralStack current plural stack\r\n */\n\nexport function normalizeHashtagInPlural(els) {\n  els.forEach(function (el) {\n    // If we're encountering a plural el\n    if (!isPluralElement(el) && !isSelectElement(el)) {\n      return;\n    } // Go down the options and search for # in any literal element\n\n\n    Object.keys(el.options).forEach(function (id) {\n      var _a;\n\n      var opt = el.options[id]; // If we got a match, we have to split this\n      // and inject a NumberElement in the middle\n\n      var matchingLiteralElIndex = -1;\n      var literalEl = undefined;\n\n      for (var i = 0; i < opt.value.length; i++) {\n        var el_1 = opt.value[i];\n\n        if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n          matchingLiteralElIndex = i;\n          literalEl = el_1;\n          break;\n        }\n      }\n\n      if (literalEl) {\n        var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n        var newEls = pegParse(newValue);\n\n        (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n      }\n\n      normalizeHashtagInPlural(opt.value);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/nemet/Desktop/mentőállomás/IMDBfrontend/node_modules/intl-messageformat-parser/lib/src/normalize.js"],"names":["__spreadArrays","isPluralElement","isLiteralElement","isSelectElement","pegParse","PLURAL_HASHTAG_REGEX","normalizeHashtagInPlural","els","forEach","el","Object","keys","options","id","_a","opt","matchingLiteralElIndex","literalEl","undefined","i","value","length","el_1","test","newValue","replace","newEls","splice","apply"],"mappings":"AAAA,SAASA,cAAT,QAA+B,OAA/B;AACA,SAASC,eAAT,EAA0BC,gBAA1B,EAA4CC,eAA5C,QAAoE,SAApE;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,IAAIC,oBAAoB,GAAG,aAA3B;AACA;;;;;;;AAMA,OAAO,SAASC,wBAAT,CAAkCC,GAAlC,EAAuC;AAC1CA,EAAAA,GAAG,CAACC,OAAJ,CAAY,UAAUC,EAAV,EAAc;AACtB;AACA,QAAI,CAACR,eAAe,CAACQ,EAAD,CAAhB,IAAwB,CAACN,eAAe,CAACM,EAAD,CAA5C,EAAkD;AAC9C;AACH,KAJqB,CAKtB;;;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYF,EAAE,CAACG,OAAf,EAAwBJ,OAAxB,CAAgC,UAAUK,EAAV,EAAc;AAC1C,UAAIC,EAAJ;;AACA,UAAIC,GAAG,GAAGN,EAAE,CAACG,OAAH,CAAWC,EAAX,CAAV,CAF0C,CAG1C;AACA;;AACA,UAAIG,sBAAsB,GAAG,CAAC,CAA9B;AACA,UAAIC,SAAS,GAAGC,SAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,KAAJ,CAAUC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACvC,YAAIG,IAAI,GAAGP,GAAG,CAACK,KAAJ,CAAUD,CAAV,CAAX;;AACA,YAAIjB,gBAAgB,CAACoB,IAAD,CAAhB,IAA0BjB,oBAAoB,CAACkB,IAArB,CAA0BD,IAAI,CAACF,KAA/B,CAA9B,EAAqE;AACjEJ,UAAAA,sBAAsB,GAAGG,CAAzB;AACAF,UAAAA,SAAS,GAAGK,IAAZ;AACA;AACH;AACJ;;AACD,UAAIL,SAAJ,EAAe;AACX,YAAIO,QAAQ,GAAGP,SAAS,CAACG,KAAV,CAAgBK,OAAhB,CAAwBpB,oBAAxB,EAA8C,QAAQI,EAAE,CAACW,KAAX,GAAmB,WAAjE,CAAf;AACA,YAAIM,MAAM,GAAGtB,QAAQ,CAACoB,QAAD,CAArB;;AACA,SAACV,EAAE,GAAGC,GAAG,CAACK,KAAV,EAAiBO,MAAjB,CAAwBC,KAAxB,CAA8Bd,EAA9B,EAAkCd,cAAc,CAAC,CAACgB,sBAAD,EAAyB,CAAzB,CAAD,EAA8BU,MAA9B,CAAhD;AACH;;AACDpB,MAAAA,wBAAwB,CAACS,GAAG,CAACK,KAAL,CAAxB;AACH,KArBD;AAsBH,GA5BD;AA6BH","sourcesContent":["import { __spreadArrays } from \"tslib\";\r\nimport { isPluralElement, isLiteralElement, isSelectElement, } from './types';\r\nimport { pegParse } from './parser';\r\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\r\n/**\r\n * Whether to convert `#` in plural rule options\r\n * to `{var, number}`\r\n * @param el AST Element\r\n * @param pluralStack current plural stack\r\n */\r\nexport function normalizeHashtagInPlural(els) {\r\n    els.forEach(function (el) {\r\n        // If we're encountering a plural el\r\n        if (!isPluralElement(el) && !isSelectElement(el)) {\r\n            return;\r\n        }\r\n        // Go down the options and search for # in any literal element\r\n        Object.keys(el.options).forEach(function (id) {\r\n            var _a;\r\n            var opt = el.options[id];\r\n            // If we got a match, we have to split this\r\n            // and inject a NumberElement in the middle\r\n            var matchingLiteralElIndex = -1;\r\n            var literalEl = undefined;\r\n            for (var i = 0; i < opt.value.length; i++) {\r\n                var el_1 = opt.value[i];\r\n                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\r\n                    matchingLiteralElIndex = i;\r\n                    literalEl = el_1;\r\n                    break;\r\n                }\r\n            }\r\n            if (literalEl) {\r\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\r\n                var newEls = pegParse(newValue);\r\n                (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\r\n            }\r\n            normalizeHashtagInPlural(opt.value);\r\n        });\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}