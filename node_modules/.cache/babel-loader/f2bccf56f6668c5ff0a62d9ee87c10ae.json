{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\r\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\r\n * with some tweaks\r\n */\n\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\r\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\r\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * @public\r\n * @param skeleton skeleton string\r\n */\n\nexport function parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n\n      case 'E':\n        result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n        break;\n\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n\n      case 'b': // am, pm, noon, midnight\n\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n      // Zone\n\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n\n      case 'O': // 1, 4: miliseconds in day short, long\n\n      case 'v': // 1, 4: generic non-location format\n\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n    }\n\n    return '';\n  });\n  return result;\n}\n\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\n\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\n\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    } // @@@+ case\n    else if (g2 === '+') {\n        result.minimumSignificantDigits = g1.length;\n      } // .### case\n      else if (g1[0] === '#') {\n          result.maximumSignificantDigits = g1.length;\n        } // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n          }\n\n    return '';\n  });\n  return result;\n}\n\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n\n    case 'sign-accounting':\n      return {\n        currencySign: 'accounting'\n      };\n\n    case 'sign-always':\n      return {\n        signDisplay: 'always'\n      };\n\n    case 'sign-accounting-always':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n\n    case 'sign-except-zero':\n      return {\n        signDisplay: 'exceptZero'\n      };\n\n    case 'sign-accounting-except-zero':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n\n    case 'sign-never':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\n\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n\n  if (signOpts) {\n    return signOpts;\n  }\n\n  return result;\n}\n/**\r\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\r\n */\n\n\nexport function parseNumberSkeleton(tokens) {\n  var result = {};\n\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n\n    switch (token.stem) {\n      case 'percent':\n        result.style = 'percent';\n        continue;\n\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n\n      case 'group-off':\n        result.useGrouping = false;\n        continue;\n\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n\n      case 'measure-unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n\n      case 'compact-short':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n\n      case 'compact-long':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n\n      case 'scientific':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n\n      case 'engineering':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n    } // Precision\n    // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\n    // precision-integer case\n\n\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        } // .### case\n        else if (g3 && g3[0] === '#') {\n            result.maximumFractionDigits = g3.length;\n          } // .00## case\n          else if (g4 && g5) {\n              result.minimumFractionDigits = g4.length;\n              result.maximumFractionDigits = g4.length + g5.length;\n            } else {\n              result.minimumFractionDigits = g1.length;\n              result.maximumFractionDigits = g1.length;\n            }\n\n        return '';\n      });\n\n      if (token.options.length) {\n        result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n      }\n\n      continue;\n    }\n\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n\n    var signOpts = parseSign(token.stem);\n\n    if (signOpts) {\n      result = __assign(__assign({}, result), signOpts);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/nemet/Desktop/mentőállomás/IMDBfrontend/node_modules/intl-messageformat-parser/lib/src/skeleton.js"],"names":["__assign","DATE_TIME_REGEX","parseDateTimeSkeleton","skeleton","result","replace","match","len","length","era","year","RangeError","month","day","weekday","hour12","hourCycle","hour","minute","second","timeZoneName","icuUnitToEcma","unit","FRACTION_PRECISION_REGEX","SIGNIFICANT_PRECISION_REGEX","parseSignificantPrecision","str","_","g1","g2","minimumSignificantDigits","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseNotationOptions","opt","signOpts","parseNumberSkeleton","tokens","_i","tokens_1","token","stem","style","currency","options","useGrouping","maximumFractionDigits","notation","compactDisplay","reduce","all","currencyDisplay","unitDisplay","test","g3","g4","g5","minimumFractionDigits"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\r\n/**\r\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\r\n * with some tweaks\r\n */\r\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\r\n/**\r\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\r\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * @public\r\n * @param skeleton skeleton string\r\n */\r\nexport function parseDateTimeSkeleton(skeleton) {\r\n    var result = {};\r\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\r\n        var len = match.length;\r\n        switch (match[0]) {\r\n            // Era\r\n            case 'G':\r\n                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\r\n                break;\r\n            // Year\r\n            case 'y':\r\n                result.year = len === 2 ? '2-digit' : 'numeric';\r\n                break;\r\n            case 'Y':\r\n            case 'u':\r\n            case 'U':\r\n            case 'r':\r\n                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\r\n            // Quarter\r\n            case 'q':\r\n            case 'Q':\r\n                throw new RangeError('`q/Q` (quarter) patterns are not supported');\r\n            // Month\r\n            case 'M':\r\n            case 'L':\r\n                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\r\n                break;\r\n            // Week\r\n            case 'w':\r\n            case 'W':\r\n                throw new RangeError('`w/W` (week) patterns are not supported');\r\n            case 'd':\r\n                result.day = ['numeric', '2-digit'][len - 1];\r\n                break;\r\n            case 'D':\r\n            case 'F':\r\n            case 'g':\r\n                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\r\n            // Weekday\r\n            case 'E':\r\n                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\r\n                break;\r\n            case 'e':\r\n                if (len < 4) {\r\n                    throw new RangeError('`e..eee` (weekday) patterns are not supported');\r\n                }\r\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\r\n                break;\r\n            case 'c':\r\n                if (len < 4) {\r\n                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');\r\n                }\r\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\r\n                break;\r\n            // Period\r\n            case 'a': // AM, PM\r\n                result.hour12 = true;\r\n                break;\r\n            case 'b': // am, pm, noon, midnight\r\n            case 'B': // flexible day periods\r\n                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\r\n            // Hour\r\n            case 'h':\r\n                result.hourCycle = 'h12';\r\n                result.hour = ['numeric', '2-digit'][len - 1];\r\n                break;\r\n            case 'H':\r\n                result.hourCycle = 'h23';\r\n                result.hour = ['numeric', '2-digit'][len - 1];\r\n                break;\r\n            case 'K':\r\n                result.hourCycle = 'h11';\r\n                result.hour = ['numeric', '2-digit'][len - 1];\r\n                break;\r\n            case 'k':\r\n                result.hourCycle = 'h24';\r\n                result.hour = ['numeric', '2-digit'][len - 1];\r\n                break;\r\n            case 'j':\r\n            case 'J':\r\n            case 'C':\r\n                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\r\n            // Minute\r\n            case 'm':\r\n                result.minute = ['numeric', '2-digit'][len - 1];\r\n                break;\r\n            // Second\r\n            case 's':\r\n                result.second = ['numeric', '2-digit'][len - 1];\r\n                break;\r\n            case 'S':\r\n            case 'A':\r\n                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\r\n            // Zone\r\n            case 'z': // 1..3, 4: specific non-location format\r\n                result.timeZoneName = len < 4 ? 'short' : 'long';\r\n                break;\r\n            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\r\n            case 'O': // 1, 4: miliseconds in day short, long\r\n            case 'v': // 1, 4: generic non-location format\r\n            case 'V': // 1, 2, 3, 4: time zone ID or city\r\n            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\r\n            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\r\n                throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\r\n        }\r\n        return '';\r\n    });\r\n    return result;\r\n}\r\nfunction icuUnitToEcma(unit) {\r\n    return unit.replace(/^(.*?)-/, '');\r\n}\r\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\r\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\r\nfunction parseSignificantPrecision(str) {\r\n    var result = {};\r\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\r\n        // @@@ case\r\n        if (typeof g2 !== 'string') {\r\n            result.minimumSignificantDigits = g1.length;\r\n            result.maximumSignificantDigits = g1.length;\r\n        }\r\n        // @@@+ case\r\n        else if (g2 === '+') {\r\n            result.minimumSignificantDigits = g1.length;\r\n        }\r\n        // .### case\r\n        else if (g1[0] === '#') {\r\n            result.maximumSignificantDigits = g1.length;\r\n        }\r\n        // .@@## or .@@@ case\r\n        else {\r\n            result.minimumSignificantDigits = g1.length;\r\n            result.maximumSignificantDigits =\r\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\r\n        }\r\n        return '';\r\n    });\r\n    return result;\r\n}\r\nfunction parseSign(str) {\r\n    switch (str) {\r\n        case 'sign-auto':\r\n            return {\r\n                signDisplay: 'auto',\r\n            };\r\n        case 'sign-accounting':\r\n            return {\r\n                currencySign: 'accounting',\r\n            };\r\n        case 'sign-always':\r\n            return {\r\n                signDisplay: 'always',\r\n            };\r\n        case 'sign-accounting-always':\r\n            return {\r\n                signDisplay: 'always',\r\n                currencySign: 'accounting',\r\n            };\r\n        case 'sign-except-zero':\r\n            return {\r\n                signDisplay: 'exceptZero',\r\n            };\r\n        case 'sign-accounting-except-zero':\r\n            return {\r\n                signDisplay: 'exceptZero',\r\n                currencySign: 'accounting',\r\n            };\r\n        case 'sign-never':\r\n            return {\r\n                signDisplay: 'never',\r\n            };\r\n    }\r\n}\r\nfunction parseNotationOptions(opt) {\r\n    var result = {};\r\n    var signOpts = parseSign(opt);\r\n    if (signOpts) {\r\n        return signOpts;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\r\n */\r\nexport function parseNumberSkeleton(tokens) {\r\n    var result = {};\r\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\r\n        var token = tokens_1[_i];\r\n        switch (token.stem) {\r\n            case 'percent':\r\n                result.style = 'percent';\r\n                continue;\r\n            case 'currency':\r\n                result.style = 'currency';\r\n                result.currency = token.options[0];\r\n                continue;\r\n            case 'group-off':\r\n                result.useGrouping = false;\r\n                continue;\r\n            case 'precision-integer':\r\n            case '.':\r\n                result.maximumFractionDigits = 0;\r\n                continue;\r\n            case 'measure-unit':\r\n                result.style = 'unit';\r\n                result.unit = icuUnitToEcma(token.options[0]);\r\n                continue;\r\n            case 'compact-short':\r\n                result.notation = 'compact';\r\n                result.compactDisplay = 'short';\r\n                continue;\r\n            case 'compact-long':\r\n                result.notation = 'compact';\r\n                result.compactDisplay = 'long';\r\n                continue;\r\n            case 'scientific':\r\n                result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\r\n                continue;\r\n            case 'engineering':\r\n                result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\r\n                continue;\r\n            case 'notation-simple':\r\n                result.notation = 'standard';\r\n                continue;\r\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\r\n            case 'unit-width-narrow':\r\n                result.currencyDisplay = 'narrowSymbol';\r\n                result.unitDisplay = 'narrow';\r\n                continue;\r\n            case 'unit-width-short':\r\n                result.currencyDisplay = 'code';\r\n                result.unitDisplay = 'short';\r\n                continue;\r\n            case 'unit-width-full-name':\r\n                result.currencyDisplay = 'name';\r\n                result.unitDisplay = 'long';\r\n                continue;\r\n            case 'unit-width-iso-code':\r\n                result.currencyDisplay = 'symbol';\r\n                continue;\r\n        }\r\n        // Precision\r\n        // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\r\n        // precision-integer case\r\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\r\n            if (token.options.length > 1) {\r\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\r\n            }\r\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\r\n                // .000* case (before ICU67 it was .000+)\r\n                if (g2 === '*') {\r\n                    result.minimumFractionDigits = g1.length;\r\n                }\r\n                // .### case\r\n                else if (g3 && g3[0] === '#') {\r\n                    result.maximumFractionDigits = g3.length;\r\n                }\r\n                // .00## case\r\n                else if (g4 && g5) {\r\n                    result.minimumFractionDigits = g4.length;\r\n                    result.maximumFractionDigits = g4.length + g5.length;\r\n                }\r\n                else {\r\n                    result.minimumFractionDigits = g1.length;\r\n                    result.maximumFractionDigits = g1.length;\r\n                }\r\n                return '';\r\n            });\r\n            if (token.options.length) {\r\n                result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\r\n            }\r\n            continue;\r\n        }\r\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\r\n            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\r\n            continue;\r\n        }\r\n        var signOpts = parseSign(token.stem);\r\n        if (signOpts) {\r\n            result = __assign(__assign({}, result), signOpts);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}