{"ast":null,"code":"import { filterProps } from './utils';\nimport { FormatError } from 'intl-messageformat';\nimport { IntlError } from './error';\nvar DISPLAY_NAMES_OPTONS = ['localeMatcher', 'style', 'type', 'fallback'];\nexport function formatDisplayName(_a, getDisplayNames, value, options) {\n  var locale = _a.locale,\n      onError = _a.onError;\n  var DisplayNames = Intl.DisplayNames;\n\n  if (!DisplayNames) {\n    onError(new FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", \"MISSING_INTL_API\"\n    /* MISSING_INTL_API */\n    ));\n  }\n\n  var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\n\n  try {\n    return getDisplayNames(locale, filteredOptions).of(value);\n  } catch (e) {\n    onError(new IntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting display name.', e));\n  }\n}","map":{"version":3,"sources":["C:/Users/nemet/Desktop/mentőállomás/IMDBfrontend/node_modules/@formatjs/intl/lib/src/displayName.js"],"names":["filterProps","FormatError","IntlError","DISPLAY_NAMES_OPTONS","formatDisplayName","_a","getDisplayNames","value","options","locale","onError","DisplayNames","Intl","filteredOptions","of","e"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,IAAIC,oBAAoB,GAAG,CACvB,eADuB,EAEvB,OAFuB,EAGvB,MAHuB,EAIvB,UAJuB,CAA3B;AAMA,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,eAA/B,EAAgDC,KAAhD,EAAuDC,OAAvD,EAAgE;AACnE,MAAIC,MAAM,GAAGJ,EAAE,CAACI,MAAhB;AAAA,MAAwBC,OAAO,GAAGL,EAAE,CAACK,OAArC;AACA,MAAIC,YAAY,GAAGC,IAAI,CAACD,YAAxB;;AACA,MAAI,CAACA,YAAL,EAAmB;AACfD,IAAAA,OAAO,CAAC,IAAIT,WAAJ,CAAgB,qHAAhB,EAAuI;AAAmB;AAA1J,KAAD,CAAP;AACH;;AACD,MAAIY,eAAe,GAAGb,WAAW,CAACQ,OAAD,EAAUL,oBAAV,CAAjC;;AACA,MAAI;AACA,WAAOG,eAAe,CAACG,MAAD,EAASI,eAAT,CAAf,CAAyCC,EAAzC,CAA4CP,KAA5C,CAAP;AACH,GAFD,CAGA,OAAOQ,CAAP,EAAU;AACNL,IAAAA,OAAO,CAAC,IAAIR,SAAJ,CAAc;AAAe;AAA7B,MAAiD,gCAAjD,EAAmFa,CAAnF,CAAD,CAAP;AACH;AACJ","sourcesContent":["import { filterProps } from './utils';\r\nimport { FormatError } from 'intl-messageformat';\r\nimport { IntlError } from './error';\r\nvar DISPLAY_NAMES_OPTONS = [\r\n    'localeMatcher',\r\n    'style',\r\n    'type',\r\n    'fallback',\r\n];\r\nexport function formatDisplayName(_a, getDisplayNames, value, options) {\r\n    var locale = _a.locale, onError = _a.onError;\r\n    var DisplayNames = Intl.DisplayNames;\r\n    if (!DisplayNames) {\r\n        onError(new FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", \"MISSING_INTL_API\" /* MISSING_INTL_API */));\r\n    }\r\n    var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\r\n    try {\r\n        return getDisplayNames(locale, filteredOptions).of(value);\r\n    }\r\n    catch (e) {\r\n        onError(new IntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting display name.', e));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}